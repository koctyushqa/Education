# Dict - dict - Словарь

# Словари – это встроенный тип данных, который является ассоциативным массивом или хешем и базируется
# на отображении пар типа (ключ:значение).

# Создать словарь можно несколькими способами:
#
# 1. С помощью изогнутых скобок(литерала):
# Пустой словарь - например:
#
# a = {}
# print(type(a))
#
# <class 'dict'>
#
# Словарь с различными элементами:
# a = {1: 5555, "pi": 3.14, 8: "eight", "login": "password"}
# print(type(a))
# print(a)
#
# <class 'dict'>
# {1: 5555, 'pi': 3.14, 8: 'eight', 'login': 'password'}
#
# 2. C помощью функции dict():
#
# a = dict([(10, 123), ("Hello", "How are you?")])       # <class 'list'> - список(list), добавляем спереди dict(), получаем словарь(dict)
# b = dict(language_1="English", language_2="French")
#
# print(type(a))
# print(type(b))
# print(a)
# print(b)
#
# <class 'dict'>
# <class 'dict'>
# {10: 123, 'Hello': 'How are you?'}
# {'language_1': 'English', 'language_2': 'French'}
#
# 3. С помощью метода fromkeys:
# Образец - dict.fromkeys(["key1", "key2"], value).
# Если value не указано, то будет - None
#
# a = dict.fromkeys(["x", "y"])
# b = dict.fromkeys(["He", "She"], 100)
#
# print(type(a))
# print(type(b))
# print(a)
# print(b)
#
# <class 'dict'>
# <class 'dict'>
# {'x': None, 'y': None}
# {'He': 100, 'She': 100}
#
# 4. С помощью генераторов словарей:
#
# a = {b: b ** 2 for b in range(8)}
#
# print(type(a))
# print(a)
#
# <class 'dict'>
# {0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49}

# В словаре, если известен ключ, то доступ к значению по этому ключу можно получить с помощью операции [].
# Этим же способом можно изменить значение, если известен ключ, который соответствует этому значению.
#
# Добавим записи в словарь и извлечём значения ключей:
#
# a = {1: 1, "hi": "hello", 3: 9}
# a[4] = 4 ** 2
# print(a[1])       # Как не зная индекса, сделать запрос, чтобы узнать значение(value)??? - Нужно знать название ключа:
# print(a["hi"])    # Название словаря(dict), название ключа(key) в квадратных скобках - выведется значение(value)
# print(a[3])
# print(a[4])
# print(a)
#
# 1
# hello
# 9
# 16
# {1: 1, 'hi': 'hello', 3: 9, 4: 16}

# Методы словарей:
#
# dict.keys() - возвращает ключи в словаре.
# dict.values() - возвращает значения в словаре.
# len(dict) – определяет количество элементов в списке.
# dict.clear() - очищает словарь.
# dict.copy() - возвращает копию словаря.
# dict.items() - возвращает пары (ключ, значение).
# dict.pop(key[, default]) - удаляет ключ и возвращает значение. Если ключа нет, возвращает default (по умолчанию бросает исключение).

# Операция del. Удаление элемента по ключу:
# del a[key] --- a - заданный словарь, key – ключ в словаре, элемент которого нужно удалить.
# Если указать несуществующий ключ key, то будет сгенерировано исключение KeyError.
# a = {1: 1, "hi": "hello", 3: 9}
# del a[3]
# print(a)
#
# {1: 1, 'hi': 'hello'}

# Встроенная функция zip():
#
# Функция zip() позволяет создать словарь путем объединения списков ключей и значений.
#
# a = dict(zip([1, 2, 3], ["One", "Two", "Three"]))
# print(a)
#
# {1: 'One', 2: 'Two', 3: 'Three'}

# Проход словаря с помощью цикла for.
#
# Month = {1: "Jan", 2: "Feb",
#          3: "Mar", 4: "...",
#          5: "Nov", 6: "Dec"}
# for i in Month:
#     print(i, "-", Month[i])
#
# 1 - Jan
# 2 - Feb
# 3 - Mar
# 4 - ...
# 5 - Nov
# 6 - Dec

# Сортировка словаря:
#
# Ключи в словаре сохраняются в произвольном порядке. Если возникает необходимость отсортировать словарь по ключам,
# то для этого можно использовать метод sort(), который используется для списков.
# Для этого предварительно нужно конвертировать представление ключей в список.
# a = {3: 'Three',  2: 'Two', 1: 'One', 4: "Four"}     # Исходный словарь
# a_keys = a.keys()                              # Собираем все ключи в переменную a_keys
# list_keys = list(a_keys)                       # Превращаем собранные ключи в список
# list_keys.sort()                               # Сортируем список
# b = {}                                         # Создаём новый словарь, куда будем записывать отсортированные значения
# for i in list_keys:                            # Создаём цикл for, и перебираем отсортированный список
#     b[i] = a[i]                                # В словарь b записываем значения таких же ключей из словаря a
# print(b)                                       # Выводим результат на экран
#
# {1: 'One', 2: 'Two', 3: 'Three', 4: 'Four'}

# Операция in. Определение наличия ключа в словаре:
#
# Если искомый ключ в словаре есть, значит выведет True. А если искомого ключа нет, то выведет - False
#
# a = {1: 2, "hi": "hello", 3: 9}
# b = 3 in a
# c = 5 in a
#
# print(b)
# print(c)
#
# True
# False

# Операция not in. Определение отсутствия ключа в словаре:
#
# Операция not in возвращает результат всегда противоположный операции in.
#
# a = {1: 2, "hi": "hello", 3: 9}
# b = "Start" not in a
# c = 1 not in a
#
# print(b)
# print(c)
#
# True
# False
