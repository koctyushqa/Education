# Tuple - tuple - Кортеж

# Кортежи (tuple) в Python – это те же списки за одним исключением. Кортежи неизменяемые структуры данных.
# Так же как списки они могут состоять из элементов разных типов, перечисленных через запятую.
# Кортежи заключаются в круглые, а не квадратные скобки.

# Кортежи можно создать несколькими способами:
#
# 1. С помощью круглых скобок - ()
# Пустой кортеж:
#
# a = ()
# print(type(a))
#
# <class 'tuple'>
#
# 2. Кортеж с одним элементом:
#
# Обратите внимание на запятую (,) в объявлении кортежа a. Если ее не указать при создании объекта с одним элементом,
# то Python предположит, что вы по ошибке добавили лишнюю пару скобок (это ни на что не влияет), но тип данных в таком
# случае — это не кортеж(это будет str или int.).
# Поэтому важно не забывать использовать запятую при объявлении кортежа с одним элементом.
#
# a = (1,)
#
# print(a)
# print(type(a))
#
# (1,)
# <class 'tuple'>
#
# 3. Кортеж с различными элементами:
#
# a = (1, "Hello", 3.14, -5, 823, "World")
# print(type(a))
# print(a)
#
# <class 'tuple'>
# (1, 'Hello', 3.14, -5, 823, 'World')
#
# 4. С помощью - tuple() :
#
# a = "How are you?"               # <class 'str'>
# b = tuple(a)
# c = [1, 2, "English", -888, 5]   # <class 'list'>
# d = tuple(c)
#
# print(a)
# print(b)
# print(c)
# print(d)
#
# How are you?
# ('H', 'o', 'w', ' ', 'a', 'r', 'e', ' ', 'y', 'o', 'u', '?')
# [1, 2, 'English', -888, 5]
# (1, 2, 'English', -888, 5)

# Зачем нужны кортежи, если есть списки?
# - Кортеж защищен от изменений, как намеренных (что плохо), так и случайных (что хорошо).
# - Меньший размер.

# Из кортежа можно извлекать элементы и брать срезы.
# Однако изменять его элементы нельзя.

# Также у типа tuple нет методов для добавления и удаления элементов.

# Преобразовать же кортеж в список, если это потребуется, как и выполнить обратную операцию легко
# с помощью встроенных в Python функций list() и tuple():
#
# a = (10, 3.14, "Hello", 69, "A")
# b = [3, "Start", 256]
#
# c = list(a)
# d = tuple(b)
#
# print("a -", type(a))
# print("b -", type(b))
# print("c -", type(c))
# print("d -", type(d))
#
# a - <class 'tuple'>
# b - <class 'list'>
# c - <class 'list'>
# d - <class 'tuple'>

# Кортежи могут содержать списки, также как и списки могут быть вложенными в другие списки.
# a = (1, 2, 8, 3.14, ["Hello", 69], "A")

# Сами кортежи неизменяемые, а объекты,которые находятся внутри могут изменяться:
# a = (1, 2, 8, 3.14, ["Hello", 69], "A")
# a[4][1] = "World"
# print(a)
#
# (1, 2, 8, 3.14, ['Hello', 'World'], 'A')

# Объединение кортежей:
# a = (1, 2, 3)
# b = (4, 5, 6, 7, 8)
# c = a + b
# d = ("A", "B", "C")
# e = c + d
#
# print(c)
# print(e)
#
# (1, 2, 3, 4, 5, 6, 7, 8)
# (1, 2, 3, 4, 5, 6, 7, 8, 'A', 'B', 'C')
# Разрешается объединять только определенные типы данных. Так, попытка соединить кортеж и список закончится ошибкой.

# Функции кортежей:
#
# В отличие от списков у кортежей нет методов, таких как append(), remove(), extend(), insert() или pop() опять-таки
# из-за их неизменяемости.
# Но есть другие: count() и len().
# count() возвращает количество повторений элемента в кортеже.
# len() возвращает длину кортежа.
# a = (1, 2, 3, 4, 4, 4, 5)
# print(a.count(4), len(a))
#
# 3 7

# Функция max() возвращает самый большой элемент последовательности, а min() — самый маленький.
# Эти функции можно использовать и для кортежей со строками.
#
# a = (1, 523, 3.14, 888, 1)
# print("max -", max(a), "min - ", min(a))
#
# max - 888 min -  1

# a = ("b", "A", "Hi", "hello my friend", "BIG WORDS")
# print("max -", max(a), "min - ", min(a))
#
# max - hello my friend min -  A
# Почему то большой букве отдаётся приоритет в min,
# a дальше по алфавиту, чем первее буква, тем у неё больше приоритет в min

# a = ("a", "b")
# print("max -", max(a), "min - ", min(a))
#
# max - b min -  a

# Функция суммы - sum() - складывает все объекты выбранного кортежа(работает только с цифрами).
# a = (1, 2, 3, 4, 4, 4, 5)
# print(sum(a))
#
# 23
