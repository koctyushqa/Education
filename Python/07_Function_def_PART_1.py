# Function - def - Функция

# Функция – это блок кода, который начинается с ключевого слова def, затем-название функции, круглые скобки и двоеточие.

# Как создать и вызвать функцию:
#
# Чтобы вызвать функцию, нужно ввести название функции, которую нужно вызвать, за которой следуют круглые скобки.
#
# def a():
#     print("I created the first function ")
#
# a()
#
# I created the first function
#
# Пустая функция:
#
# def epmty():
#     pass
#
# epmty()
#
# Оператор pass. Это пустая операция, это означает, что когда оператор pass выполняется, не происходит ничего.

# Передача аргументов функции:
#
# def add(a, b):
#     return a + b
#
# print(add(1, 3))
#
# 4
#
# Можно вызвать функцию, указав наименование аргументов:
#
# Стоит отметить, что не важно, в каком порядке передавать аргументы функции, до тех пор, пока они называются корректно.
#
# def add(a, b):
#     return a + b
#
# print(add(b=2, a=8))
#
# total = add(a=5, b=3)
# print(total)
#
# 10
# 8

# Обычные и ключевые аргументы:
#
# В функции можно использовать неограниченное количество параметров,
# но число аргументов должно точно соответствовать параметрам.
# Параметр — это имя в списке параметров в первой строке определения функции. Он получает свое значение при вызове.
# Аргумент — это реальное значение или ссылка на него, переданное функции при вызове.
# Например:
# def add(a, b):          # a и b - параметры, их может быть неограниченное количество
#     return a + b
#
# print(add(1, 2))        # 1 и 2 - аргументы, их должно быть ровно столько, сколько созданно параметров
#
# 3
#
# Обычные аргументы - это аргументы, значения которых не заданы, при создании функции:
# def function(a, b):        - a и b - обычные параметры, которые имеют обычные аргументы(отсутствует =(равно) и какое-то значение параметра).
# Ключевые аргументы - это аргументы, значения которых изначально заданы, при создании функции:
# def function(a=1, b=2):    - 1 и 2 - это ключевые аргументы.
#
# Пример с сразу заданными аргументами и потом изменёнными:
#
# def function(a=1, b=2):
#     return a + b
#
# print(function())
# print(function(a=6, b=4))
#
# 3
# 10
#
# Функция, которая имеет несколько обычных аргументов(a, b), и несколько ключевых аргументов(c=8, d=5):
#
# def function(a, b, c=8, d=5):
#     return a + b + c + d
#
# print(function(1, 3))       # Это и два ниже одно и тоже, только оформление разное. # a - принимает значение 1, b - 3.
# print(function(a=1, b=3))   # Это и выше одно и тоже, только оформление разное
# print(function(b=3, a=1))   # Это и выше одно и тоже, только оформление разное
#
# print(function(3, 1)) # А эта хоть и имеет ту же сумму, но переменные a и b, имееют уже другие значения. a - 3, b - 1.
#
# print(function(8, 5, c=10, d=3))
#
# 17
# 17
# 17
# 17
# 26


# *args и **kwargs :
#
# args - это кортеж, куда записывается всё что мы передаём функции без знака равно.
# kwargs - это словарь, куда записывается всё что мы передаём функции со знаком равно.
# Последовательность важна! Сначала передаём все значения для args(без равно), потом все значения для kwargs(с равно).
#
# Можно настроить функцию на прием любого количества аргументов, или ключевых аргументов, при помощи особого синтаксиса.
# Чтобы получить бесконечное количество аргументов, мы используем *args,
# а чтобы получить бесконечное количество ключевых аргументов, мы используем **kwargs.
# Сами слова “args” и “kwargs” не так важны. Это просто сокращение. Можно назвать их *lol и **omg,
# и они будут работать таким же образом. Главное здесь – это количество звездочек.
#
# def a(*args, **kwargs):
#     print(args)
#     print(kwargs)
#
# a(1, 3.14, ("some", 888, "words"), ["Hello", "Hi", 100], numbers=1234567890, name="Konstantin")
#
# (1, 3.14, ('some', 888, 'words'), ['Hello', 'Hi', 100])
# {'numbers': 1234567890, 'name': 'Konstantin'}
# Если при выводе, у кортежа нужно убрать скобки(так же уберутся запятые, между элементами),
# то перед args нужно поставить *. Вот так - print(*args).
# Выведется - 1 3.14 ('some', 888, 'words') ['Hello', 'Hi', 100]

# Область видимость и глобальные переменные:
#
# Концепт области (scope) в Пайтон такой же, как и в большей части языков программирования.
# Область видимости указывает нам, когда и где переменная может быть использована.
# Если мы определяем переменные внутри функции, эти переменные могут быть использованы только внутри этой функции.
# Когда функция заканчиваются, значения этих переменных станут неизвестны, так как они находятся вне области видимости.
# Можно обойти этот момент, указав, что переменная глобальна(global). Например - global a.
#
# def summa_xy():
#     global x
#     x = 1
#     y = 2
#     return x + y
#
# def summa_xz():
#     z = 5
#     return x + z
#
# print(summa_xy())
# print(summa_xz())
#
# 3
# 6

# Функцию можно записать в одну строку, если блок инструкций представляет собой простое выражение:
#
# def func_sum(a, b): return a + b
#
# print(func_sum(2, 8))
#
# 10

# Функции могут быть вложенными:
#
# Создаём функцию с двумя переменными a и b. В этой функции создаём новую функцию, которая будет считать куб числа.
# В первой функции пишем, что хотим чтобы переменные из первой функции прошли математические операции второй функции,
# а затем сложились - return multiply(a) + multiply(b). Затем запрашиваем вывод и передаём числа для первой функции.
# def function(a, b):
#     def multiply(c):
#         return c * c * c
#
#     return multiply(a) + multiply(b)
#
# print(function(2, 3))
#
# 35

# Задача - Определить високосный год:
#
# Написать функцию is_year_leap, принимающую 1 аргумент — год, и возвращающую True, если год високосный, и False иначе.
#
# def is_year_leap(year):
#     return year % 4 == 0 and year % 100 != 0 or year % 400 == 0
#
# print(is_year_leap(int(input("Введите год: "))))
