# Set - set - Множества

# Множества в Python – это структура данных, которые содержат неупорядоченные элементы. Элементы также не являются
# индексированными. Как и список, множество позволяет внесение и удаление элементов.
# Однако, есть ряд особенных характеристик, которые определяют и отделяют множество от других структур данных:
# - Множество не содержит дубликаты элементов;
# - Ответ всегда выводится в случайном порядке;
# - Элементы множества являются неизменными (их нельзя менять),
#   однако само по себе множество является изменяемым, и его можно менять;
# - Так как элементы не индексируются, множества не поддерживают никаких операций среза и индексирования;
# - Множество может содержать любое количество элементов и элементы могут быть разных типов,
#   к примеру, целые числа, строки, кортежи, и так далее.
#   Однако, множество не поддерживает изменяемые элементы, такие как списки, словари, и так далее.

# Создать множество можно несколькими способами:
#
# 1. С помощью изогнутых скобок(литерала), а элементы внутри разделяются при помощи запятых:
#
# a = {1.0, 2, "Hello", (3.14, "English"), 888}
# print(type(a))
# print(a)
#
# <class 'set'>
# {1.0, (3.14, 'English'), 2, 'Hello', 888}   # Особенность множеств - ответ всегда выводится в случайном порядке
# {1.0, 2, (3.14, 'English'), 888, 'Hello'}
# {'Hello', 1.0, 2, 888, (3.14, 'English')}
#
# 2. Можно создать множество из списка. Вызвав функцию set():
#
# a = set([1.0, 2, "Hello", (3.14, "English"), 888])
# print(type(a))
# print(a)
#
# <class 'set'>
# {(3.14, 'English'), 1.0, 2, 'Hello', 888}
#
# 3. Чтобы создать пустое множество, нужно использовать функцию set() без передачи какого-либо значения в параметрах:
#
# a = set()
# print(type(a))
#
# <class 'set'>

# Множества не содержат дубликаты элементов:
#
# a = {1, 2, 3, 1, 2, 4, 5, 1, 3}
# print(type(a))
# print(a)
#
# <class 'set'>
# {1, 2, 3, 4, 5}   # Множество удалило дубликаты и выдало только по одному экземпляру элементов.

# Доступ к элементам множеств:
#
# Python не предоставляет прямой способ получения значения к отдельным элементам множества.
#
# 1. Можно использовать цикл для итерации через все элементы множества:
#
# Months = {"Jan", "Feb", "Mar", "...", "Nov", "Dec"}
# for i in Months:
#     print(i)
#
# Dec
# ...
# Feb
# Mar
# Nov
# Jan
#
# 2. Можно проверить наличие элемента во множестве при помощи in:
#
# Если будет выведено - True - значит элемент был найден во множестве.
# Если будет выведено - False - значит элемент не был найден во множестве.
# Months = {"Jan", "Feb", "Mar", "...", "Nov", "Dec"}
# print("Nov" in Months)
# print("Jun" in Months)
#
# True
# False
#
# Добавление элементов во множество возможно, при помощи функции add():
#
# Months = {"Jan", "Feb", "Mar", "...", "Nov", "Dec"}
# Months.add("Apr")
#
# print(Months)
#
# {'Nov', 'Mar', '...', 'Apr', 'Dec', 'Feb', 'Jan'}

# Удаление элемента из множеств:
#
# Возможно, при помощи функции discard() или функции remove():
# Метод discard() не будет выдавать ошибку, если элемент не был найден во множестве.
# Метод remove() выдаст ошибку, если удаляемый элемент не был найден во множестве.
#
# a = {1, "Hello", (3.14, "Start"), 3.0}
# a.remove(1)
# a.discard((3.14, "Start"))
#
# print(a)
#
# {3.0, 'Hello'}
#
# С методом pop(), можно удалить и вернуть элемент.
# Так как элементы находятся в произвольном порядке, мы не можем утверждать или предсказать, какой элемент будет удален.
#
# a = {"Hello", 5, 1, 3, 2, 6, 4}
# a.pop()
#
# print(a)
#
# {2, 3, 4, 5, 'Hello', 6}
# {2, 3, 1, 5, 6, 4}
# {2, 3, 'Hello', 5, 6, 4}
#
# Используя функцию clear() можно удалить все элементы во множестве:
#
# a = {"Hello", 5, 1, 3, 2, 6, 4}
# a.clear()
# #
# print(a)
#
# set()   # Результатом является пустой set() без каких-либо элементов внутри.

# Объединение множеств:
#
# 1. Выполняется при помощи функции union():
#
# first_months = {"Jan", "Feb", "Mar", "...", "Dec"}
# second_months = {"Oct", "Nov", "Dec"}
# all_months = first_months.union(second_months)
#
# print(all_months)
#
# {'Mar', 'Oct', 'Feb', 'Jan', 'Nov', '...', 'Dec'}
#
# При выполнении операции объединения, дубликаты игнорируются,
# так что только один из двух элементов дубликатов будет отображаться.
#
# 2. Выполняется при помощи оператора | :
#
# Этим способом даже можно объединять больше двух множеств(три, четыре и так далее):
#
# a = {1, 2, 3}
# b = {3, 2, 4}
# c = {1, 5, 6}
# d = {7, 8, 9}
#
# print(a | b | c | d)
#
# {1, 2, 3, 4, 5, 6, 7, 8, 9}

# Пересечение множеств:
#
# Пересечение представляет собой множество элементов, которые являются общими для первого и для второго множеств.
# Операция пересечения во множествах может быть достигнута как при помощи оператора &.
#
# a = {1, 2, 3}
# b = {3, 2, 4}
#
# print(a & b)
#
# {2, 3}

# Разница между множествами:
#
# Разница представляет собой множество элементов, которые не являются общими для первого и для второго множеств.
#
# a = {1, 2, 3, 5}
# b = {3, 2, 4, 8}
#
# print(a - b)
# print(b - a)
#
# {1, 5}
# {8, 4}

# Метод copy():
#
# Этот метод возвращает копию множества.
#
# a = {"Jan", "Feb", "Mar", "...", "Nov", "Dec"}
# b = a.copy()
#
# print(b)
#
# {'Dec', '...', 'Feb', 'Jan', 'Mar', 'Nov'}

# Метод isdisjoint():
#
# Этот метод проверяет, является ли множество пересечением или нет.
# Если множества не содержат общих элементов, метод возвращает True, в противном случае — False.
#
# a = {1, 2, 3}
# b = {3, 2, 4}
# c = {7, 8, 9}
#
# print(a.isdisjoint(b))
# print(a.isdisjoint(c))
#
# False
# True

# Метод len():
#
# Этот метод возвращает длину множества, которая является общим количеством элементов во множестве.
#
# a = {"Jan", "Feb", "Mar", "...", "Nov", "Dec"}
#
# print(len(a))
#
# 6

# Frozenset - frozenset - неизменяемое множество:
#
# Единственное отличие set от frozenset заключается в том, что set - изменяемый тип данных, а frozenset - нет.
#
# a = frozenset([1.0, 222, "Jan", "Feb", "Mar", "...", "Nov", "Dec"])
#
# print(type(a))
# print(a)
#
# <class 'frozenset'>                                               # Три запуска программы
# frozenset({'Nov', 1.0, '...', 'Jan', 'Feb', 'Dec', 'Mar', 222})
# <class 'frozenset'>
# frozenset({'Feb', 1.0, 'Jan', '...', 'Dec', 'Nov', 222, 'Mar'})
# <class 'frozenset'>
# frozenset({1.0, 'Dec', 'Jan', 'Mar', 'Nov', '...', 222, 'Feb'})
